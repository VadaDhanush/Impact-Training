/// GREEDY ALGORITHM :-

1.) N meetings
2.) Job scheduling
3.) 01 fractional knapsack problem

1.) ---> N meetings in a row :-
Input: n=6, start[] = {1,3,0,5,8,5}, end[] = {2,4,5,7,9,9}
Output: 1 2 4 5

-> Explanation: In a room we have to conduct maximum posiible meetings from all meetings.
Type 1 : return maximum meetings
Type 2 : return pairs also ( ending time of current meeting is strictly lesser to the starting time of next meeting ).
Type 3 : return all the pairs ( Ending time of current pair and starting time of next meeting can bve same ).
Type 4 : Duplicate mettings accepted.

-> From given array's make pairs or triplets. 
-> Do the custom sorting according to the end time using comparitor method.
-> For sure will take 1st meeting. ending time of current meeting strictly lesser to the starting time of next meeting, 
   if it is strictly lesseer consider the meeting.

// 0/1 KNAPSACK :-

Input:  n=3, w=50, values[]= {100, 60, 120}, weight[] = {20, 10, 30}
Output: 240

STEPS:-
1.-> From a array's get per kg valued array. 
2 -> Get the per kg value
3 -> Make triplets 
4 -> Do the custom sorting based on per kg values
5 ->Take complete weight from 1st pair and decrease the total capacity


/// 3. Job scheduling:-

Input: N=4, Jobs = {(1,4,20), (2,1,10), (3,1,40), (4,1,30)}
Output: 2 60
Expalnation: The 3rd job with adeadline 1 is performed during the unit of time.
             The second unit of time as its deadline is 4.
Profit: 40 + 20 = 60.
