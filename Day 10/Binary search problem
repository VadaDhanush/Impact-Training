//Binary search:

1. if array is not sorted, sort the array.
2. initial 2 pointers, l at 0 and r at n-1.
3. run the loop til i and j cross each other.
4. find the middle value.
5. compare middle value with the target, if arr[mid]  is equal to target, then return mid.
6. if target element greater than the arr[mid], then left pointer is updated to mid +1.
7. if target element less than the arr[mid], then right pointer is updated to mid-1.

middle = (low + high)/2;
middle = low +(high-low)/2; - stop overflow


import java.util.Scanner;

public class BinSearch {
    public static int searchElement(int[] arr, int target){
        int low = 0;
        int high = arr.length-1;
        
        while(low<=high){
            int mid = low +(high-low)/2;
            
            if(arr[mid]==target){
                return mid;
            }else if(arr[mid]<target){
                low = mid + 1; 
            }else{
                high = mid -1;
            }
        }
        return -1;
    }
    
    public static void main(String[] args){
        int[] arr={2,3,9,12,18,25, 33, 47, 79, 89};
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter target number:");
        int target = sc.nextInt();
        int result = BinSearch.searchElement(arr, target);
        System.out.println(result);
         sc.close();
}

    }
